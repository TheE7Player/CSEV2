# TheE7Player CS:GO *.res to *.yaml Parser

# events.yaml ~ Generated by parsing .res files in pak01_dir.vpk (CS:GO)
# Generation of such is valid as from 18/7/2021 (DD/MM/YYYY) [Time of parsing *.res]
# Some events are invoked by other events with the same name, these will be presented with a comma in its type
# The attributes will contain a underscore with a single letter to represent the same event with its variation (_g, _m etc)

# Details
# ~ 263 Available Events
# ~ gameevents.res : 77
# ~ modevents.res : 160
# ~ serverevents.res : 16
# ~ duplicate events (Events which occur in 2 or more *.res files) : 10

team_info:
   comment: "info about team"
   type: "gameevents"
   attributes:
     - ["teamid", "byte", "unique team id"]
     - ["teamname", "string", "team name eg \"Team Blue\""]


team_score:
   comment: "team score changed"
   type: "gameevents"
   attributes:
     - ["teamid", "byte", "team id"]
     - ["score", "short", "total team score"]


teamplay_broadcast_audio:
   comment: "emits a sound to everyone on a team"
   type: "gameevents"
   attributes:
     - ["team", "byte", "unique team id"]
     - ["sound", "string", "name of the sound to emit"]


items_gifted:
   type: "gameevents,modevents"
   attributes_g:
     - ["player", "short", "entity used by player"]
     - ["itemdef", "long"]
     - ["numgifts", "short"]
     - ["giftidx", "long"]
     - ["accountid", "long"]
   attributes_m:
     - ["player", "byte", "entindex of the player who sent the gift"]
     - ["itemdef", "long", "the item definition index of the gift that was opened"]
     - ["numgifts", "byte", "how many recipients got the gifts in this gift batch"]
     - ["giftidx", "byte", "index of recipient in this gift batch (0 for the first recipient, 1 for second, and so on...)"]
     - ["accountid", "long", "gift recipient's account ID"]


player_team:
   comment: "player change his team"
   type: "gameevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["team", "byte", "team id"]
     - ["oldteam", "byte", "old team id"]
     - ["disconnect", "bool", "team change because player disconnects"]
     - ["autoteam", "bool", "true if the player was auto assigned to the team"]
     - ["silent", "bool", "if true wont print the team join messages"]
     - ["isbot", "bool", "true if player is a bot"]


player_class:
   comment: "a player changed his class"
   type: "gameevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["class", "string", "new player class / model"]


player_death:
   comment: "a game event, name may be 32 charaters long"
   type: "gameevents,modevents"
   attributes_g:
     - ["userid", "short", "user ID who died"]
     - ["attacker", "short", "user ID who killed"]
   attributes_m:
     - ["userid", "short", "user ID who died"]
     - ["attacker", "short", "user ID who killed"]
     - ["assister", "short", "user ID who assisted in the kill"]
     - ["assistedflash", "bool", "assister helped with a flash"]
     - ["weapon", "string", "weapon name killer used"]
     - ["weapon_itemid", "string", "inventory item id of weapon killer used"]
     - ["weapon_fauxitemid", "string", "faux item id of weapon killer used"]
     - ["weapon_originalowner_xuid", "string"]
     - ["headshot", "bool", "singals a headshot"]
     - ["dominated", "short", "did killer dominate victim with this kill"]
     - ["revenge", "short", "did killer get revenge on victim with this kill"]
     - ["wipe", "short", "is the kill resulting in squad wipe"]
     - ["penetrated", "short", "number of objects shot penetrated before killing target"]
     - ["noreplay", "bool", "if replay data is unavailable, this will be present and set to false"]
     - ["noscope", "bool", "kill happened without a scope, used for death notice icon"]
     - ["thrusmoke", "bool", "hitscan weapon went through smoke grenade"]
     - ["attackerblind", "bool", "attacker was blind from flashbang"]
     - ["distance", "float", "distance to victim in meters"]


player_hurt:
   type: "gameevents,modevents"
   attributes_g:
     - ["userid", "short", "player index who was hurt"]
     - ["attacker", "short", "player index who attacked"]
     - ["health", "byte", "remaining health points"]
   attributes_m:
     - ["userid", "short", "player index who was hurt"]
     - ["attacker", "short", "player index who attacked"]
     - ["health", "byte", "remaining health points"]
     - ["armor", "byte", "remaining armor points"]
     - ["weapon", "string", "weapon name attacker used, if not the world"]
     - ["dmg_health", "short", "damage done to health"]
     - ["dmg_armor", "byte", "damage done to armor"]
     - ["hitgroup", "byte", "hitgroup that was damaged"]


player_chat:
   comment: "a public player chat"
   type: "gameevents"
   attributes:
     - ["teamonly", "bool", "true if team only chat"]
     - ["userid", "short", "chatting player"]
     - ["text", "string", "chat text"]


player_score:
   comment: "players scores changed"
   type: "gameevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["kills", "short", "# of kills"]
     - ["deaths", "short", "# of deaths"]
     - ["score", "short", "total game score"]


player_spawn:
   comment: "player spawned in game"
   type: "gameevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["teamnum", "short"]


player_shoot:
   comment: "player shoot his weapon"
   type: "gameevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["weapon", "byte", "weapon ID"]
     - ["mode", "byte", "weapon mode"]


player_use:
   type: "gameevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["entity", "short", "entity used by player"]


player_changename:
   type: "gameevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["oldname", "string", "players old (current) name"]
     - ["newname", "string", "players new name"]


player_hintmessage:
   type: "gameevents"
   attributes:
     - ["hintmessage", "string", "localizable string of a hint"]


game_init:
   comment: "sent when a new game is started"
   type: "gameevents"
   attributes: []


game_newmap:
   comment: "send when new map is completely loaded"
   type: "gameevents"
   attributes:
     - ["mapname", "string", "map name"]


game_start:
   comment: "a new game starts"
   type: "gameevents"
   attributes:
     - ["roundslimit", "long", "max round"]
     - ["timelimit", "long", "time limit"]
     - ["fraglimit", "long", "frag limit"]
     - ["objective", "string", "round objective"]


game_end:
   comment: "a game ended"
   type: "gameevents"
   attributes:
     - ["winner", "byte", "winner team/user id"]


round_start:
   type: "gameevents,modevents"
   attributes_g:
     - ["timelimit", "long", "round time limit in seconds"]
     - ["fraglimit", "long", "frag limit in seconds"]
     - ["objective", "string", "round objective"]
   attributes_m:
     - ["timelimit", "long", "round time limit in seconds"]
     - ["fraglimit", "long", "frag limit in seconds"]
     - ["objective", "string", "round objective"]


round_announce_match_point:
   type: "gameevents"
   attributes: []


round_announce_final:
   type: "gameevents"
   attributes: []


round_announce_last_round_half:
   type: "gameevents"
   attributes: []


round_announce_match_start:
   type: "gameevents"
   attributes: []


round_announce_warmup:
   type: "gameevents"
   attributes: []


round_end:
   type: "gameevents,modevents"
   attributes_g:
     - ["winner", "byte", "winner team/user i"]
     - ["reason", "byte", "reson why team won"]
     - ["message", "string", "end round message"]
     - ["legacy", "byte", "server-generated legacy value"]
   attributes_m:
     - ["winner", "byte", "winner team/user i"]
     - ["reason", "byte", "reson why team won"]
     - ["message", "string", "end round message"]
     - ["legacy", "byte", "server-generated legacy value"]
     - ["player_count", "short", "total number of players alive at the end of round, used for statistics gathering, computed on the server in the event client is in replay when receiving this message"]
     - ["nomusic", "byte", "if set, don't play round end music, because action is still on-going"]


round_end_upload_stats:
   type: "gameevents"
   attributes: []


round_officially_ended:
   type: "gameevents"
   attributes: []


round_time_warning:
   type: "gameevents,serverevents"
   attributes_g: []
   attributes_s: []


ugc_map_info_received:
   type: "gameevents"
   attributes:
     - ["published_file_id", "uint64"]


ugc_map_unsubscribed:
   type: "gameevents"
   attributes:
     - ["published_file_id", "uint64"]


ugc_map_download_error:
   type: "gameevents"
   attributes:
     - ["published_file_id", "uint64"]
     - ["error_code", "long"]


ugc_file_download_finished:
   type: "gameevents"
   attributes:
     - ["hcontent", "uint64", "id of this specific content (may be image or map)"]


ugc_file_download_start:
   type: "gameevents"
   attributes:
     - ["hcontent", "uint64", "id of this specific content (may be image or map)"]
     - ["published_file_id", "uint64", "id of the associated content package"]


begin_new_match:
   type: "gameevents"
   attributes: []


round_start_pre_entity:
   type: "gameevents"
   attributes: []


teamplay_round_start:
   comment: "round restart"
   type: "gameevents,modevents"
   attributes_g:
     - ["full_reset", "bool", "is this a full reset of the map"]
   attributes_m:
     - ["full_reset", "bool", "is this a full reset of the map"]


hostname_changed:
   type: "gameevents"
   attributes:
     - ["hostname", "string"]


difficulty_changed:
   type: "gameevents"
   attributes:
     - ["newDifficulty", "short"]
     - ["oldDifficulty", "short"]
     - ["strDifficulty", "string", "new difficulty as string"]


finale_start:
   type: "gameevents"
   attributes:
     - ["rushes", "short"]


game_message:
   comment: "a message send by game logic to everyone"
   type: "gameevents"
   attributes:
     - ["target", "byte", "0 = console, 1 = HUD"]
     - ["text", "string", "the message text"]


dm_bonus_weapon_start:
   type: "gameevents"
   attributes:
     - ["time", "short", "The length of time that this bonus lasts"]
     - ["Pos", "short", "Loadout position of the bonus weapon"]


survival_announce_phase:
   type: "gameevents"
   attributes:
     - ["phase", "short", "The phase #"]


break_breakable:
   type: "gameevents"
   attributes:
     - ["entindex", "long"]
     - ["userid", "short"]
     - ["material", "byte", "BREAK_GLASS, BREAK_WOOD, etc"]


break_prop:
   type: "gameevents"
   attributes:
     - ["entindex", "long"]
     - ["userid", "short"]


player_decal:
   type: "gameevents,modevents"
   attributes_g:
     - ["userid", "short"]
   attributes_m:
     - ["userid", "short"]


entity_killed:
   type: "gameevents"
   attributes:
     - ["entindex_killed", "long"]
     - ["entindex_attacker", "long"]
     - ["entindex_inflictor", "long"]
     - ["damagebits", "long"]


bonus_updated:
   type: "gameevents"
   attributes:
     - ["numadvanced", "short"]
     - ["numbronze", "short"]
     - ["numsilver", "short"]
     - ["numgold", "short"]


player_stats_updated:
   type: "gameevents,modevents"
   attributes_g:
     - ["forceupload", "bool"]
   attributes_m:
     - ["forceupload", "bool"]


achievement_event:
   type: "gameevents"
   attributes:
     - ["achievement_name", "string", "non-localized name of achievement"]
     - ["cur_val", "short", "# of steps toward achievement"]
     - ["max_val", "short", "total # of steps in achievement"]


achievement_increment:
   type: "gameevents"
   attributes:
     - ["achievement_id", "long", "ID of achievement that went up"]
     - ["cur_val", "short", "# of steps toward achievement"]
     - ["max_val", "short", "total # of steps in achievement"]


achievement_earned:
   type: "gameevents,modevents"
   attributes_g:
     - ["player", "byte", "entindex of the player"]
     - ["achievement", "short", "achievement ID"]
   attributes_m:
     - ["player", "byte", "entindex of the player"]
     - ["achievement", "short", "achievement ID"]


achievement_write_failed:
   type: "gameevents"
   attributes: []


physgun_pickup:
   type: "gameevents"
   attributes:
     - ["entindex", "long", "entity picked up"]


flare_ignite_npc:
   type: "gameevents"
   attributes:
     - ["entindex", "long", "entity ignited"]


helicopter_grenade_punt_miss:
   type: "gameevents"
   attributes: []


user_data_downloaded:
   comment: "fired when achievements/stats are downloaded from Steam or XBox Live"
   type: "gameevents"
   attributes: []


ragdoll_dissolved:
   type: "gameevents"
   attributes:
     - ["entindex", "long"]


gameinstructor_draw:
   type: "gameevents"
   attributes: []


gameinstructor_nodraw:
   type: "gameevents"
   attributes: []


map_transition:
   type: "gameevents"
   attributes: []


entity_visible:
   type: "gameevents"
   attributes:
     - ["userid", "short", "The player who sees the entity"]
     - ["subject", "short", "Entindex of the entity they see"]
     - ["classname", "string", "Classname of the entity they see"]
     - ["entityname", "string", "name of the entity they see"]


set_instructor_group_enabled:
   type: "gameevents"
   attributes:
     - ["group", "string"]
     - ["enabled", "short"]


instructor_server_hint_create:
   comment: "create a hint using data supplied entirely by the server/map. Intended for hints to smooth playtests before content is ready to make the hint unneccessary. NOT INTENDED AS A SHIPPABLE CRUTCH"
   type: "gameevents"
   attributes:
     - ["hint_name", "string", "what to name the hint. For referencing it again later (e.g. a kill command for the hint instead of a timeout)"]
     - ["hint_replace_key", "string", "type name so that messages of the same type will replace each other"]
     - ["hint_target", "long", "entity id that the hint should display at"]
     - ["hint_activator_userid", "short", "userid id of the activator"]
     - ["hint_timeout", "short", "how long in seconds until the hint automatically times out, 0 = never"]
     - ["hint_icon_onscreen", "string", "the hint icon to use when the hint is onscreen. e.g. \"icon_alert_red\""]
     - ["hint_icon_offscreen", "string", "the hint icon to use when the hint is offscreen. e.g. \"icon_alert\""]
     - ["hint_caption", "string", "the hint caption. e.g. \"#ThisIsDangerous\""]
     - ["hint_activator_caption", "string", "the hint caption that only the activator sees e.g. \"#YouPushedItGood\""]
     - ["hint_color", "string", "the hint color in \"r,g,b\" format where each component is 0-255"]
     - ["hint_icon_offset", "float", "how far on the z axis to offset the hint from entity origin"]
     - ["hint_range", "float", "range before the hint is culled"]
     - ["hint_flags", "long", "hint flags"]
     - ["hint_binding", "string", "bindings to use when use_binding is the onscreen icon"]
     - ["hint_gamepad_binding", "string", "gamepad bindings to use when use_binding is the onscreen icon"]
     - ["hint_allow_nodraw_target", "bool", "if false, the hint will dissappear if the target entity is invisible"]
     - ["hint_nooffscreen", "bool", "if true, the hint will not show when outside the player view"]
     - ["hint_forcecaption", "bool", "if true, the hint caption will show even if the hint is occluded"]
     - ["hint_local_player_only", "bool", "if true, only the local player will see the hint"]


instructor_server_hint_stop:
   comment: "destroys a server/map created hint"
   type: "gameevents"
   attributes:
     - ["hint_name", "string", "The hint to stop. Will stop ALL hints with this name"]


read_game_titledata:
   comment: "read user titledata from profile"
   type: "gameevents"
   attributes:
     - ["controllerId", "short", "Controller id of user"]


write_game_titledata:
   comment: "write user titledata in profile"
   type: "gameevents"
   attributes:
     - ["controllerId", "short", "Controller id of user"]


reset_game_titledata:
   comment: "reset user titledata; do not automatically write profile"
   type: "gameevents"
   attributes:
     - ["controllerId", "short", "Controller id of user"]


weaponhud_selection:
   type: "gameevents"
   attributes:
     - ["userid", "short", "Player who this event applies to"]
     - ["mode", "byte", "EWeaponHudSelectionMode (switch / pickup / drop)"]
     - ["entindex", "long", "Weapon entity index"]


vote_ended:
   type: "gameevents"
   attributes: []


vote_started:
   type: "gameevents"
   attributes:
     - ["issue", "string"]
     - ["param1", "string"]
     - ["team", "byte"]
     - ["initiator", "long", "entity id of the player who initiated the vote"]


vote_changed:
   type: "gameevents"
   attributes:
     - ["vote_option1", "byte"]
     - ["vote_option2", "byte"]
     - ["vote_option3", "byte"]
     - ["vote_option4", "byte"]
     - ["vote_option5", "byte"]
     - ["potentialVotes", "byte"]


vote_passed:
   type: "gameevents"
   attributes:
     - ["details", "string"]
     - ["param1", "string"]
     - ["team", "byte"]


vote_failed:
   type: "gameevents"
   attributes:
     - ["team", "byte"]


vote_cast:
   type: "gameevents"
   attributes:
     - ["vote_option", "byte", "which option the player voted on"]
     - ["team", "short"]
     - ["entityid", "long", "entity id of the voter"]


vote_options:
   type: "gameevents"
   attributes:
     - ["count", "byte", "Number of options - up to MAX_VOTE_OPTIONS"]
     - ["option1", "string"]
     - ["option2", "string"]
     - ["option3", "string"]
     - ["option4", "string"]
     - ["option5", "string"]


endmatch_mapvote_selecting_map:
   type: "gameevents"
   attributes:
     - ["count", "byte", "Number of \"ties\""]
     - ["slot1", "byte"]
     - ["slot2", "byte"]
     - ["slot3", "byte"]
     - ["slot4", "byte"]
     - ["slot5", "byte"]
     - ["slot6", "byte"]
     - ["slot7", "byte"]
     - ["slot8", "byte"]
     - ["slot9", "byte"]
     - ["slot10", "byte"]


endmatch_cmm_start_reveal_items:
   type: "gameevents"
   attributes: []


inventory_updated:
   type: "gameevents"
   attributes: []


cart_updated:
   type: "gameevents"
   attributes: []


store_pricesheet_updated:
   type: "gameevents"
   attributes: []


gc_connected:
   type: "gameevents"
   attributes: []


item_schema_initialized:
   type: "gameevents"
   attributes: []


client_loadout_changed:
   type: "gameevents"
   attributes: []


add_player_sonar_icon:
   type: "gameevents"
   attributes:
     - ["userid", "short"]
     - ["pos_x", "float"]
     - ["pos_y", "float"]
     - ["pos_z", "float"]


add_bullet_hit_marker:
   type: "gameevents"
   attributes:
     - ["userid", "short"]
     - ["bone", "short"]
     - ["pos_x", "short"]
     - ["pos_y", "short"]
     - ["pos_z", "short"]
     - ["ang_x", "short"]
     - ["ang_y", "short"]
     - ["ang_z", "short"]
     - ["start_x", "short"]
     - ["start_y", "short"]
     - ["start_z", "short"]
     - ["hit", "bool"]


verify_client_hit:
   type: "gameevents"
   attributes:
     - ["userid", "short"]
     - ["pos_x", "float"]
     - ["pos_y", "float"]
     - ["pos_z", "float"]
     - ["timestamp", "float"]


other_death:
   type: "modevents"
   attributes:
     - ["otherid", "short", "other entity ID who died"]
     - ["othertype", "string", "other entity type"]
     - ["attacker", "short", "user ID who killed"]
     - ["weapon", "string", "weapon name killer used"]
     - ["weapon_itemid", "string", "inventory item id of weapon killer used"]
     - ["weapon_fauxitemid", "string", "faux item id of weapon killer used"]
     - ["weapon_originalowner_xuid", "string"]
     - ["headshot", "bool", "singals a headshot"]
     - ["penetrated", "short", "number of objects shot penetrated before killing target"]
     - ["noscope", "bool", "kill happened without a scope, used for death notice icon"]
     - ["thrusmoke", "bool", "hitscan weapon went through smoke grenade"]
     - ["attackerblind", "bool", "attacker was blind from flashbang"]


item_purchase:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["team", "short"]
     - ["loadout", "short"]
     - ["weapon", "string"]


bomb_beginplant:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who is planting the bomb"]
     - ["site", "short", "bombsite index"]


bomb_abortplant:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who is planting the bomb"]
     - ["site", "short", "bombsite index"]


bomb_planted:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who planted the bomb"]
     - ["site", "short", "bombsite index"]


bomb_defused:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who defused the bomb"]
     - ["site", "short", "bombsite index"]


bomb_exploded:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who planted the bomb"]
     - ["site", "short", "bombsite index"]


bomb_dropped:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who dropped the bomb"]
     - ["entindex", "long"]


bomb_pickup:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who picked up the bomb"]


defuser_dropped:
   type: "modevents"
   attributes:
     - ["entityid", "long", "defuser's entity ID"]


defuser_pickup:
   type: "modevents"
   attributes:
     - ["entityid", "long", "defuser's entity ID"]
     - ["userid", "short", "player who picked up the defuser"]


announce_phase_end:
   type: "modevents"
   attributes: []


cs_intermission:
   type: "modevents"
   attributes: []


bomb_begindefuse:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who is defusing"]
     - ["haskit", "bool"]


bomb_abortdefuse:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who was defusing"]


hostage_follows:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who touched the hostage"]
     - ["hostage", "short", "hostage entity index"]


hostage_hurt:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who hurt the hostage"]
     - ["hostage", "short", "hostage entity index"]


hostage_killed:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who killed the hostage"]
     - ["hostage", "short", "hostage entity index"]


hostage_rescued:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who rescued the hostage"]
     - ["hostage", "short", "hostage entity index"]
     - ["site", "short", "rescue site index"]


hostage_stops_following:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who rescued the hostage"]
     - ["hostage", "short", "hostage entity index"]


hostage_rescued_all:
   type: "modevents"
   attributes: []


hostage_call_for_help:
   type: "modevents"
   attributes:
     - ["hostage", "short", "hostage entity index"]


vip_escaped:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who was the VIP"]


vip_killed:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who was the VIP"]
     - ["attacker", "short", "user ID who killed the VIP"]


player_radio:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["slot", "short"]


bomb_beep:
   type: "modevents"
   attributes:
     - ["entindex", "long", "c4 entity"]


weapon_fire:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["weapon", "string", "weapon name used"]
     - ["silenced", "bool", "is weapon silenced"]


weapon_fire_on_empty:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["weapon", "string", "weapon name used"]


grenade_thrown:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["weapon", "string", "weapon name used"]


weapon_outofammo:
   type: "modevents"
   attributes:
     - ["userid", "short"]


weapon_reload:
   type: "modevents"
   attributes:
     - ["userid", "short"]


weapon_zoom:
   type: "modevents"
   attributes:
     - ["userid", "short"]


silencer_detach:
   type: "modevents"
   attributes:
     - ["userid", "short"]


inspect_weapon:
   type: "modevents"
   attributes:
     - ["userid", "short"]


weapon_zoom_rifle:
   type: "modevents"
   attributes:
     - ["userid", "short"]


player_spawned:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["inrestart", "bool", "true if restart is pending"]


item_pickup:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["item", "string", "either a weapon such as 'tmp' or 'hegrenade', or an item such as 'nvgs'"]
     - ["silent", "bool"]
     - ["defindex", "long"]


item_pickup_slerp:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["index", "short"]
     - ["behavior", "short"]


item_pickup_failed:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["item", "string"]
     - ["reason", "short"]
     - ["limit", "short"]


item_remove:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["item", "string", "either a weapon such as 'tmp' or 'hegrenade', or an item such as 'nvgs'"]
     - ["defindex", "long"]


ammo_pickup:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["item", "string", "either a weapon such as 'tmp' or 'hegrenade', or an item such as 'nvgs'"]
     - ["index", "long", "the weapon entindex"]


item_equip:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["item", "string", "either a weapon such as 'tmp' or 'hegrenade', or an item such as 'nvgs'"]
     - ["defindex", "long"]
     - ["canzoom", "bool"]
     - ["hassilencer", "bool"]
     - ["issilenced", "bool"]
     - ["hastracers", "bool"]
     - ["weptype", "short"]
     - ["ispainted", "bool"]


enter_buyzone:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["canbuy", "bool"]


exit_buyzone:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["canbuy", "bool"]


buytime_ended:
   type: "modevents"
   attributes: []


enter_bombzone:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["hasbomb", "bool"]
     - ["isplanted", "bool"]


exit_bombzone:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["hasbomb", "bool"]
     - ["isplanted", "bool"]


enter_rescue_zone:
   type: "modevents"
   attributes:
     - ["userid", "short"]


exit_rescue_zone:
   type: "modevents"
   attributes:
     - ["userid", "short"]


silencer_off:
   type: "modevents"
   attributes:
     - ["userid", "short"]


silencer_on:
   type: "modevents"
   attributes:
     - ["userid", "short"]


buymenu_open:
   type: "modevents"
   attributes:
     - ["userid", "short"]


buymenu_close:
   type: "modevents"
   attributes:
     - ["userid", "short"]


round_prestart:
   comment: "sent before all other round restart actions"
   type: "modevents"
   attributes: []


round_poststart:
   comment: "sent after all other round restart actions"
   type: "modevents"
   attributes: []


grenade_bounce:
   type: "modevents"
   attributes:
     - ["userid", "short"]


hegrenade_detonate:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


flashbang_detonate:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


smokegrenade_detonate:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


smokegrenade_expired:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


molotov_detonate:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


decoy_detonate:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


decoy_started:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


tagrenade_detonate:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


inferno_startburn:
   type: "modevents"
   attributes:
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


inferno_expire:
   type: "modevents"
   attributes:
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


inferno_extinguish:
   type: "modevents"
   attributes:
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


decoy_firing:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


bullet_impact:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]


player_footstep:
   type: "modevents"
   attributes:
     - ["userid", "short"]


player_jump:
   type: "modevents"
   attributes:
     - ["userid", "short"]


player_blind:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["attacker", "short", "user ID who threw the flash"]
     - ["entityid", "short", "the flashbang going off"]
     - ["blind_duration", "float"]


player_falldamage:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["damage", "float"]


door_moving:
   type: "modevents"
   attributes:
     - ["entindex", "long"]
     - ["userid", "short"]


round_freeze_end:
   type: "modevents"
   attributes: []


mb_input_lock_success:
   type: "modevents"
   attributes: []


mb_input_lock_cancel:
   type: "modevents"
   attributes: []


nav_blocked:
   type: "modevents"
   attributes:
     - ["area", "long"]
     - ["blocked", "bool"]


nav_generate:
   type: "modevents"
   attributes: []


achievement_info_loaded:
   type: "modevents"
   attributes: []


spec_target_updated:
   type: "modevents"
   attributes:
     - ["userid", "byte", "entindex of the player"]


spec_mode_updated:
   type: "modevents"
   attributes:
     - ["userid", "byte", "entindex of the player"]


hltv_changed_mode:
   type: "modevents"
   attributes:
     - ["oldmode", "long"]
     - ["newmode", "long"]
     - ["obs_target", "long"]


cs_game_disconnected:
   type: "modevents"
   attributes: []


cs_win_panel_round:
   type: "modevents"
   attributes:
     - ["show_timer_defend", "bool"]
     - ["show_timer_attack", "bool"]
     - ["timer_time", "short"]
     - ["final_event", "byte", "define in cs_gamerules.h"]
     - ["funfact_token", "string"]
     - ["funfact_player", "short"]
     - ["funfact_data1", "long"]
     - ["funfact_data2", "long"]
     - ["funfact_data3", "long"]


cs_win_panel_match:
   type: "modevents"
   attributes: []


cs_match_end_restart:
   type: "modevents"
   attributes: []


cs_pre_restart:
   type: "modevents"
   attributes: []


show_freezepanel:
   type: "modevents"
   attributes:
     - ["victim", "short", "endindex of the one who was killed"]
     - ["killer", "short", "entindex of the killer entity"]
     - ["hits_taken", "short"]
     - ["damage_taken", "short"]
     - ["hits_given", "short"]
     - ["damage_given", "short"]


hide_freezepanel:
   type: "modevents"
   attributes: []


freezecam_started:
   type: "modevents"
   attributes: []


player_avenged_teammate:
   type: "modevents"
   attributes:
     - ["avenger_id", "short"]
     - ["avenged_player_id", "short"]


achievement_earned_local:
   type: "modevents"
   attributes:
     - ["achievement", "short", "achievement ID"]
     - ["splitscreenplayer", "short", "splitscreen ID"]


item_found:
   type: "modevents"
   attributes:
     - ["player", "byte", "entindex of the player"]
     - ["quality", "byte", "quality of the item"]
     - ["method", "byte", "method by which we acquired the item"]
     - ["itemdef", "long", "the item definition index"]
     - ["itemid", "long", "the item id in the players inventory"]


repost_xbox_achievements:
   type: "modevents"
   attributes:
     - ["splitscreenplayer", "short", "splitscreen ID"]


match_end_conditions:
   type: "modevents"
   attributes:
     - ["frags", "long"]
     - ["max_rounds", "long"]
     - ["win_rounds", "long"]
     - ["time", "long"]


round_mvp:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["reason", "short"]
     - ["value", "long"]
     - ["musickitmvps", "long"]
     - ["nomusic", "byte"]


show_survival_respawn_status:
   type: "modevents"
   attributes:
     - ["loc_token", "string"]
     - ["duration", "long"]
     - ["userid", "short"]


client_disconnect:
   type: "modevents"
   attributes: []


gg_player_levelup:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who leveled up"]
     - ["weaponrank", "short"]
     - ["weaponname", "string", "name of weapon being awarded"]


ggtr_player_levelup:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who leveled up"]
     - ["weaponrank", "short"]
     - ["weaponname", "string", "name of weapon being awarded"]


assassination_target_killed:
   type: "modevents"
   attributes:
     - ["target", "short", "player killed"]
     - ["killer", "short", "killing player (with the quest)"]


ggprogressive_player_levelup:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who leveled up"]
     - ["weaponrank", "short"]
     - ["weaponname", "string", "name of weapon being awarded"]


gg_killed_enemy:
   type: "modevents"
   attributes:
     - ["victimid", "short", "user ID who died"]
     - ["attackerid", "short", "user ID who killed"]
     - ["dominated", "short", "did killer dominate victim with this kill"]
     - ["revenge", "short", "did killer get revenge on victim with this kill"]
     - ["bonus", "bool", "did killer kill with a bonus weapon?"]


gg_final_weapon_achieved:
   type: "modevents"
   attributes:
     - ["playerid", "short", "user ID who achieved the final gun game weapon"]


gg_bonus_grenade_achieved:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID who achieved the bonus grenade"]


switch_team:
   type: "modevents"
   attributes:
     - ["numPlayers", "short", "number of active players on both T and CT"]
     - ["numSpectators", "short", "number of spectators"]
     - ["avg_rank", "short", "average rank of human players"]
     - ["numTSlotsFree", "short"]
     - ["numCTSlotsFree", "short"]


gg_leader:
   type: "modevents"
   attributes:
     - ["playerid", "short", "user ID that is currently in the lead"]


gg_team_leader:
   type: "modevents"
   attributes:
     - ["playerid", "short", "user ID that is currently in the lead"]


gg_player_impending_upgrade:
   type: "modevents"
   attributes:
     - ["userid", "short", "player who will be leveling up"]


write_profile_data:
   type: "modevents"
   attributes: []


trial_time_expired:
   type: "modevents"
   attributes:
     - ["slot", "short", "player whose time has expired"]


update_matchmaking_stats:
   type: "modevents"
   attributes: []


player_reset_vote:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["vote", "bool"]


enable_restart_voting:
   type: "modevents"
   attributes:
     - ["enable", "bool"]


sfuievent:
   type: "modevents"
   attributes:
     - ["action", "string"]
     - ["data", "string"]
     - ["slot", "byte"]


start_vote:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["type", "byte"]
     - ["vote_parameter", "short"]


player_given_c4:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID who received the c4"]


player_become_ghost:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID who received the c4"]


gg_reset_round_start_sounds:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID who should have round start sounds reset"]


tr_player_flashbanged:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID of the player banged"]


tr_mark_complete:
   type: "modevents"
   attributes:
     - ["complete", "short"]


tr_mark_best_time:
   type: "modevents"
   attributes:
     - ["time", "long"]


tr_exit_hint_trigger:
   type: "modevents"
   attributes: []


bot_takeover:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["botid", "short"]
     - ["index", "short"]


tr_show_finish_msgbox:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID of the player"]


tr_show_exit_msgbox:
   type: "modevents"
   attributes:
     - ["userid", "short", "user ID of the player"]


reset_player_controls:
   comment: "used for demos"
   type: "modevents"
   attributes: []


jointeam_failed:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["reason", "byte", "0 = team_full"]


teamchange_pending:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["toteam", "byte"]


material_default_complete:
   type: "modevents"
   attributes: []


cs_prev_next_spectator:
   type: "modevents"
   attributes:
     - ["next", "bool"]


cs_handle_ime_event:
   type: "modevents"
   attributes:
     - ["local", "1"]
     - ["eventtype", "string"]
     - ["eventdata", "wstring"]


nextlevel_changed:
   comment: "a game event, name may be 32 characters long"
   type: "modevents"
   attributes:
     - ["nextlevel", "string"]
     - ["mapgroup", "string"]
     - ["skirmishmode", "string"]


seasoncoin_levelup:
   type: "modevents"
   attributes:
     - ["player", "short", "entindex of the player"]
     - ["category", "short"]
     - ["rank", "short"]


tournament_reward:
   type: "modevents"
   attributes:
     - ["defindex", "long"]
     - ["totalrewards", "long"]
     - ["accountid", "long"]


start_halftime:
   type: "modevents"
   attributes: []


ammo_refill:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["success", "bool"]


parachute_pickup:
   type: "modevents"
   attributes:
     - ["userid", "short"]


parachute_deploy:
   type: "modevents"
   attributes:
     - ["userid", "short"]


dronegun_attack:
   type: "modevents"
   attributes:
     - ["userid", "short"]


drone_dispatched:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["priority", "short"]
     - ["drone_dispatched", "short"]


loot_crate_visible:
   type: "modevents"
   attributes:
     - ["userid", "short", "player entindex"]
     - ["subject", "short", "crate entindex"]
     - ["type", "string", "type of crate (metal, wood, or paradrop)"]


loot_crate_opened:
   type: "modevents"
   attributes:
     - ["userid", "short", "player entindex"]
     - ["type", "string", "type of crate (metal, wood, or paradrop)"]


open_crate_instr:
   type: "modevents"
   attributes:
     - ["userid", "short", "player entindex"]
     - ["subject", "short", "crate entindex"]
     - ["type", "string", "type of crate (metal, wood, or paradrop)"]


smoke_beacon_paradrop:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["paradrop", "short"]


survival_paradrop_spawn:
   type: "modevents"
   attributes:
     - ["entityid", "short"]


survival_paradrop_break:
   type: "modevents"
   attributes:
     - ["entityid", "short"]


drone_cargo_detached:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["cargo", "short"]
     - ["delivered", "bool"]


drone_above_roof:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["cargo", "short"]


choppers_incoming_warning:
   type: "modevents"
   attributes:
     - ["global", "bool"]


firstbombs_incoming_warning:
   type: "modevents"
   attributes:
     - ["global", "bool"]


dz_item_interaction:
   type: "modevents"
   attributes:
     - ["userid", "short", "player entindex"]
     - ["subject", "short", "crate entindex"]
     - ["type", "string", "type of crate (metal, wood, or paradrop)"]


snowball_hit_player_face:
   type: "modevents"
   attributes:
     - ["userid", "short", "player userid"]


survival_teammate_respawn:
   type: "modevents"
   attributes:
     - ["userid", "short"]


survival_no_respawns_warning:
   type: "modevents"
   attributes:
     - ["userid", "short"]


survival_no_respawns_final:
   type: "modevents"
   attributes:
     - ["userid", "short"]


player_ping:
   type: "modevents"
   attributes:
     - ["userid", "short"]
     - ["entityid", "short"]
     - ["x", "float"]
     - ["y", "float"]
     - ["z", "float"]
     - ["urgent", "bool"]


player_ping_stop:
   type: "modevents"
   attributes:
     - ["entityid", "short"]


guardian_wave_restart:
   type: "modevents"
   attributes: []


server_spawn:
   comment: "send once a server starts"
   type: "serverevents"
   attributes:
     - ["hostname", "string", "public host name"]
     - ["address", "string", "hostame, IP or DNS name"]
     - ["port", "short", "server port"]
     - ["game", "string", "game dir"]
     - ["mapname", "string", "map name"]
     - ["maxplayers", "long", "max players"]
     - ["os", "string", "WIN32, LINUX"]
     - ["dedicated", "bool", "true if dedicated server"]
     - ["official", "bool", "true if official valve dedicated server"]
     - ["password", "bool", "true if password protected"]


server_pre_shutdown:
   comment: "server is about to be shut down"
   type: "serverevents"
   attributes:
     - ["reason", "string", "reason why server is about to be shut down"]


server_shutdown:
   comment: "server shut down"
   type: "serverevents"
   attributes:
     - ["reason", "string", "reason why server was shut down"]


server_cvar:
   comment: "a server console var has changed"
   type: "serverevents"
   attributes:
     - ["cvarname", "string", "cvar name, eg \"mp_roundtime\""]
     - ["cvarvalue", "string", "new cvar value"]


server_message:
   comment: "a generic server message"
   type: "serverevents"
   attributes:
     - ["text", "string", "the message text"]


server_addban:
   type: "serverevents"
   attributes:
     - ["name", "string", "player name"]
     - ["userid", "short", "user ID on server"]
     - ["networkid", "string", "player network (i.e steam) id"]
     - ["ip", "string", "IP address"]
     - ["duration", "string", "length of the ban"]
     - ["by", "string", "banned by..."]
     - ["kicked", "bool", "whether the player was also kicked"]


server_removeban:
   type: "serverevents"
   attributes:
     - ["networkid", "string", "player network (i.e steam) id"]
     - ["ip", "string", "IP address"]
     - ["by", "string", "removed by..."]


player_connect:
   comment: "a new client connected"
   type: "serverevents"
   attributes:
     - ["name", "string", "player name"]
     - ["index", "byte", "player slot (entity index-1)"]
     - ["userid", "short", "user ID on server (unique on server)"]
     - ["networkid", "string", "player network (i.e steam) id"]
     - ["address", "string", "ip:port"]


player_info:
   comment: "a player changed his name"
   type: "serverevents"
   attributes:
     - ["name", "string", "player name"]
     - ["index", "byte", "player slot (entity index-1)"]
     - ["userid", "short", "user ID on server (unique on server)"]
     - ["networkid", "string", "player network (i.e steam) id"]
     - ["bot", "bool", "true if player is a AI bot"]


player_disconnect:
   comment: "a client was disconnected"
   type: "serverevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["reason", "string", "\"self\", \"kick\", \"ban\", \"cheat\", \"error\""]
     - ["name", "string", "player name"]
     - ["networkid", "string", "player network (i.e steam) id"]


player_activate:
   type: "serverevents"
   attributes:
     - ["userid", "short", "user ID on server"]


player_connect_full:
   comment: "player has sent final message in the connection sequence"
   type: "serverevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["index", "byte", "player slot (entity index-1)"]


player_say:
   type: "serverevents"
   attributes:
     - ["userid", "short", "user ID on server"]
     - ["text", "string", "the say text"]


cs_round_start_beep:
   type: "serverevents"
   attributes: []


cs_round_final_beep:
   type: "serverevents"
   attributes: []


hltv_replay:
   type: "serverevents"
   attributes:
